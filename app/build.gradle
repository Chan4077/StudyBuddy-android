apply plugin: "com.android.application"
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: "io.fabric"
apply plugin: "com.google.firebase.firebase-perf"
apply plugin: "com.google.android.gms.oss-licenses-plugin"
apply plugin: "com.novoda.build-properties"

buildProperties {
	secrets {
		using rootProject.file("secret_keys.properties")
	}
	// Version metadata
	versions {
		using rootProject.file("versions.properties")
	}
}

ext {
	// See the Semver guide for more info
	// Adapted from https://medium.com/@maxirosson/versioning-android-apps-d6ec171cfd82
	// Allows the user to specify the versionMajor via the command-line (See below for an example)
	versionMajor = project.properties["versionMajor"] as Integer ?: buildProperties
			.versions["version_major"].int
	// Allows the user to specify the versionMinor via the command-line (See below for an example)
	versionMinor = project.properties["versionMinor"] as Integer ?: buildProperties
			.versions["version_minor"].int
	// Allows the user to specify the versionPatch via the command-line (See below for an example)
	versionPatch = project.properties["versionPatch"] as Integer ?: buildProperties
			.versions["version_patch"].int
	// Allows the user to specify the versionClassifier via the command-line
	// Example: ./gradlew <task> -PversionClassifier=nightly
	versionClassifier = project.properties["versionClassifier"] ?: null
	// Allows the user to specify the currentVariant via the command-line  (See below for an example)
	currentVariant = project.properties["currentVariant"] ?: null
}

/**
 * Gets the time when the app was built as a string (Follows the ISO 8601 standard)
 */
static def getBuildTimeString() {
	return new Date().format("yyyy-MM-dd-HHmmss") // E.g. 2019-09-07-180540
}

def generateVersionCodeBuildVariant() {
	// Default is 1 to represent release variant
	// 0: Debug variant
	// 1: Release variant
	// 10: Nightly variant
	def result = 1
	switch (currentVariant) {
		case "debug":
			result = 0
			break
		case "nightly":
			result = 10
			break
	}
	println("Generated version code (build variant): $result")
	return result
}

def generateVersionCodeClassifier() {
	// Default is 0 to represent no version classifier
	def result = 0
	switch (versionClassifier) {
		case "alpha":
			result = 1
			break
		case "beta":
			result = 2
			break
		case "rc":
			result = 3
			break
		case "nightly":
			result = 10
			break
	}
	println("Generated version code (version classifier): $result")
	return result
}

def generateVersionCode() {
	/*
	 * Returns <build-variant type as number>-<version classifier>-<major>-<minor>-<patch>
	 * E.g. 01-10-01-01-00, with the following config:
	 * - release build variant
	 * - nightly classifier
	 * - version major: 1
	 * - version minor: 1
	 * - version patch: 0
	 */
	return (generateVersionCodeBuildVariant() * 100000000 + generateVersionCodeClassifier() * 1000000
			+ versionMajor * 10000 + versionMinor * 100 + versionPatch)
}

def generateVersionName() {
	return "${String.valueOf(versionMajor)}.${String.valueOf(versionMinor)}.${String.valueOf(versionPatch)}"
}

android {
	compileSdkVersion 29
	defaultConfig {
		applicationId "com.edricchan.studybuddy"
		minSdkVersion 21
		targetSdkVersion 29
		// versionCode 9
		versionCode generateVersionCode()
		println("Generated version code: ${generateVersionCode()}")
		versionName generateVersionName()
		println("Generated version name: ${generateVersionName()}")
		testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
		resConfigs "en"
		multiDexEnabled true
		// Enable support library for vector drawables
		vectorDrawables.useSupportLibrary true
	}

	signingConfigs {
		release {
			storeFile rootProject.file("studybuddy.jks")
		}
	}

	buildTypes {
		debug {
			debuggable true // Allow app to be debuggable
			applicationIdSuffix ".debug"

			// Reduce amount of time needed to compile app in debug mode
			// Can be accessed with BuildConfig.BUILD_TIME
			buildConfigLong "BUILD_TIME", 0L
			// Can be accessed with R.int.build_time
			resValueInt "build_time", 0
			currentVariant = "debug"
		}
		release {
			minifyEnabled true // Enable minification
			shrinkResources true // Shrink resources to reduce APK size
			proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
			signingConfig signingConfigs.release
			// Can be accessed with BuildConfig.BUILD_TIME
			buildConfigLong "BUILD_TIME", System.currentTimeMillis()
			// Can be accessed with R.int.build_time
			resValueInt "build_time", System.currentTimeMillis().toInteger()
			currentVariant = "release"
		}
		nightly {
			// Nightly releases
			initWith release
			applicationIdSuffix ".nightly"
			versionNameSuffix "-NIGHTLY-$buildTimeString"
			currentVariant = "nightly"
		}
	}
	compileOptions {
		sourceCompatibility JavaVersion.VERSION_1_8
		targetCompatibility JavaVersion.VERSION_1_8
	}
	kotlinOptions {
		jvmTarget = "1.8"
	}
	buildToolsVersion '29.0.2'

	def isRunningOnActions = System.getenv("CI") == "true"

	if (isRunningOnActions) {
		// Configure keystore
		signingConfigs.release.storePassword = System.getenv("APP_KEYSTORE_PASSWORD")
		signingConfigs.release.keyAlias = System.getenv("APP_KEYSTORE_ALIAS")
		signingConfigs.release.keyPassword = System.getenv("APP_KEYSTORE_ALIAS_PASSWORD")
	} else if (buildProperties.secrets != null) {
		// Building locally
		signingConfigs.release.storePassword = buildProperties.secrets['keystore_password'].string
		signingConfigs.release.keyAlias = buildProperties.secrets['keystore_alias'].string
		signingConfigs.release.keyPassword = buildProperties.secrets['keystore_alias_password'].string
	}
}

dependencies {
	// Support Lib
	// implementation 'androidx.legacy:legacy-support-v4:1.0.0'
	// Support Annotations
	implementation 'androidx.annotation:annotation:1.1.0'
	implementation fileTree(include: ['*.jar'], dir: 'libs')
	androidTestImplementation('androidx.test.espresso:espresso-core:3.2.0', {
		exclude group: "com.android.support", module: "support-annotations"
	})
	androidTestImplementation 'androidx.test:core:1.2.0'
	// AndroidX Core
	implementation 'androidx.core:core:1.2.0-beta02'
	implementation 'androidx.core:core-ktx:1.2.0-beta01'
	// AppCompat
	implementation 'androidx.appcompat:appcompat:1.1.0'
	// ConstraintLayout
	implementation 'androidx.constraintlayout:constraintlayout:2.0.0-beta3'
	// Design Support
	implementation 'com.google.android.material:material:1.2.0-alpha01'
	// RecyclerView
	implementation 'androidx.recyclerview:recyclerview:1.1.0-rc01'
	implementation 'androidx.recyclerview:recyclerview-selection:1.1.0-alpha06'
	// SwipeRefreshLayout (For some reason, it isn't included in AndroidX Core)
	implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0-alpha03'
	// Chrome Custom Tabs
	implementation 'androidx.browser:browser:1.2.0-alpha09'
	testImplementation 'junit:junit:4.12'
	// Firebase stuff
	implementation 'com.google.firebase:firebase-core:17.2.1'
	implementation 'com.google.firebase:firebase-firestore-ktx:21.2.1'
	implementation 'com.google.firebase:firebase-auth:19.1.0'
	implementation 'com.google.firebase:firebase-messaging:20.0.0'
	implementation 'com.google.android.gms:play-services-auth:17.0.0'
	implementation 'com.google.firebase:firebase-perf:19.0.1'
	implementation 'com.google.firebase:firebase-dynamic-links:19.0.0'
	// Provide a way to update the app
	implementation 'com.github.javiersantos:AppUpdater:2.7'
	// The app"s intro screen
	// implementation 'com.heinrichreimersoftware:material-intro:1.6.2'
	// Crashlytics
	implementation 'com.crashlytics.sdk.android:crashlytics:2.10.1'
	// For JSON parsing
	implementation 'com.google.code.gson:gson:2.8.6'
	// Emoji AppCompat
	implementation 'androidx.emoji:emoji-appcompat:1.0.0'
	// AndroidX Preference
	implementation 'androidx.preference:preference:1.1.0'
	// Kotlin support for AndroidX Preference library
	implementation 'androidx.preference:preference-ktx:1.1.0'
	// AndroidX WorkManager
	implementation "androidx.work:work-runtime-ktx:2.2.0"

	// Custom Preferences
	/*
	- New releases to the AndroidX preference library have broken the following 2 libraries
	  (this has since been fixed in newer versions of the library)
	- See https://github.com/takisoft/preferencex-android/issues/4 for the relevant issue
	  and https://issuetracker.google.com/issues/128579401 for the issue tracker
	*/
	implementation 'com.takisoft.preferencex:preferencex:1.1.0-alpha05'
	// implementation 'com.takisoft.preferencex:preferencex-datetimepicker:1.1.0-alpha05'

	// Image picker
	implementation 'com.github.esafirm.android-image-picker:imagepicker:2.1.0'

	// About screen
	implementation 'com.github.daniel-stoneuk:material-about-library:2.4.2'
	// Explcitly specify the AndroidX CardView library for now
	implementation 'androidx.cardview:cardview:1.0.0'

	// Markwon - Markdown parser for Android
	// See https://noties.github.io/Markwon for more info
	implementation 'ru.noties:markwon:2.0.2'

	// Used to handle loading of remote images
	implementation 'com.github.bumptech.glide:glide:4.10.0'
	kapt 'com.github.bumptech.glide:compiler:4.10.0'

	// OSS licenses library to show open source licenses
	implementation 'com.google.android.gms:play-services-oss-licenses:17.0.0'
	// Backported Java Stream library for Java 6/7
	implementation 'net.sourceforge.streamsupport:streamsupport:1.7.1'

	// Support for Kotlin
	implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

	// Support for parsing Deep Links
	implementation 'com.airbnb:deeplinkdispatch:4.1.0'
	kapt 'com.airbnb:deeplinkdispatch-processor:4.1.0'
}
apply plugin: "com.google.gms.google-services"
